# Main CI/CD Pipeline - Orchestrator
# This workflow orchestrates all reusable workflows
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - staging
          - production

permissions:
  contents: read
  actions: read
  security-events: write
  checks: write
  id-token: write
  pull-requests: write
  issues: write

env:
  DOTNET_VERSION: '8.0.x'
  AZURE_FUNCTIONAPP_NAME: 'myazurefunctionapp'
  PROJECT_PATH: './MyFunctionApp/MyFunctionApp.csproj'
  BUILD_CONFIGURATION: 'Release'
  COVERAGE_THRESHOLD: 80

jobs:
  # ============================================
  # Build Application
  # ============================================
  build:
    name: Build
    uses: ./.github/workflows/reusable-build.yml
    with:
      dotnet-version: ${{ env.DOTNET_VERSION }}
      build-configuration: Release
      treat-warnings-as-errors: true
      project-path: ./MyFunctionApp/MyFunctionApp.csproj
      artifact-name: azure-function-app
      artifact-retention-days: 30

  # ============================================
  # Run Tests
  # ============================================
  test:
    name: Test
    needs: build
    uses: ./.github/workflows/reusable-test.yml
    with:
      dotnet-version: ${{ env.DOTNET_VERSION }}
      build-configuration: Release
      coverage-threshold: 80
      run-on-windows: true
    secrets:
      codecov-token: ${{ secrets.CODECOV_TOKEN }}

  # ============================================
  # Code Quality Analysis
  # ============================================
  code-quality:
    name: Code Quality
    needs: build
    uses: ./.github/workflows/reusable-code-quality.yml
    with:
      dotnet-version: ${{ env.DOTNET_VERSION }}
      fail-on-format-errors: false

  # ============================================
  # Security Scanning
  # ============================================
  security:
    name: Security
    needs: build
    uses: ./.github/workflows/reusable-security.yml
    with:
      dotnet-version: ${{ env.DOTNET_VERSION }}
      artifact-name: ${{ needs.build.outputs.artifact-name }}
      fail-on-vulnerabilities: true
      severity-cutoff: high

  # ============================================
  # License Compliance
  # ============================================
  license:
    name: License
    needs: build
    uses: ./.github/workflows/reusable-license.yml
    with:
      dotnet-version: ${{ env.DOTNET_VERSION }}

  # ============================================
  # Integration Gate
  # ============================================
  integration-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: 
      - build
      - test
      - code-quality
      - security
      - license
    
    steps:
    - name: All checks passed
      run: |
        echo "### âœ… All Quality Gates Passed!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Build Version:** ${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Artifact:** ${{ needs.build.outputs.artifact-name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Ready for deployment! ðŸš€" >> $GITHUB_STEP_SUMMARY

  # ============================================
  # Deploy to Development
  # ============================================
  deploy-dev:
    name: Deploy to Dev
    needs: 
      - integration-gate
      - build
    if: github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/feature/')
    uses: ./.github/workflows/reusable-deploy.yml
    with:
      environment: development
      artifact-name: ${{ needs.build.outputs.artifact-name }}
      function-app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
      run-health-check: true
      health-check-endpoint: /api/health
    secrets:
      azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
      azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  # ============================================
  # Deploy to Staging
  # ============================================
  deploy-staging:
    name: Deploy to Staging
    needs: 
      - integration-gate
      - build
    if: github.ref == 'refs/heads/main'
    uses: ./.github/workflows/reusable-deploy.yml
    with:
      environment: staging
      artifact-name: ${{ needs.build.outputs.artifact-name }}
      function-app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
      run-health-check: true
      health-check-endpoint: /api/health
    secrets:
      azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
      azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  # ============================================
  # Deploy to Production
  # ============================================
  deploy-production:
    name: Deploy to Production
    needs: 
      - deploy-staging
      - build
    if: github.ref == 'refs/heads/main'
    uses: ./.github/workflows/reusable-deploy.yml
    with:
      environment: production
      artifact-name: ${{ needs.build.outputs.artifact-name }}
      function-app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
      run-health-check: true
      health-check-endpoint: /api/health
    secrets:
      azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
      azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  # ============================================
  # Create Release
  # ============================================
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: 
      - deploy-production
      - build
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.build.outputs.version }}
        release_name: Release v${{ needs.build.outputs.version }}
        body: |
          ## Production Deployment Successful ðŸŽ‰
          
          **Version:** ${{ needs.build.outputs.version }}
          **Commit:** ${{ github.sha }}
          **Deployed to:** Production
          
          ### Changes
          View the commits included in this release.
        draft: false
        prerelease: false

  # ============================================
  # Notifications
  # ============================================
  notify-failure:
    name: Notify Failure
    needs: 
      - build
      - test
      - code-quality
      - security
      - license
    if: failure()
    uses: ./.github/workflows/reusable-notify.yml
    with:
      notification-type: failure
      workflow-name: CI/CD Pipeline
      create-issue: true
    secrets:
      smtp-password: ${{ secrets.SMTP_PASSWORD }}
      smtp-to: ${{ secrets.SMTP_TO }}
      smtp-from: ${{ secrets.SMTP_FROM }}

  notify-success:
    name: Notify Success
    needs: 
      - deploy-production
    if: success() && github.ref == 'refs/heads/main'
    uses: ./.github/workflows/reusable-notify.yml
    with:
      notification-type: success
      workflow-name: CI/CD Pipeline
      create-issue: false
    secrets:
      smtp-password: ${{ secrets.SMTP_PASSWORD }}
      smtp-to: ${{ secrets.SMTP_TO }}
      smtp-from: ${{ secrets.SMTP_FROM }}
