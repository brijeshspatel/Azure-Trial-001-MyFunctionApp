# Reusable workflow for security scanning
name: Security Scanning

on:
  workflow_call:
    inputs:
      dotnet-version:
        description: '.NET SDK version'
        required: false
        type: string
        default: '8.0.x'
      artifact-name:
        description: 'Name of the build artifact to scan'
        required: false
        type: string
        default: ''
      fail-on-vulnerabilities:
        description: 'Fail build on high/critical vulnerabilities'
        required: false
        type: boolean
        default: true
      severity-cutoff:
        description: 'Minimum severity to fail build (low, medium, high, critical)'
        required: false
        type: string
        default: 'high'

jobs:
  dependency-scan:
    name: Dependency & Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Check for vulnerable packages
      run: |
        echo "Checking for vulnerable NuGet packages..."
        dotnet list package --vulnerable --include-transitive 2>&1 | tee vulnerable-packages.txt
        
        if [ "${{ inputs.fail-on-vulnerabilities }}" == "true" ]; then
          if grep -q "has the following vulnerable packages" vulnerable-packages.txt; then
            echo "❌ Vulnerable packages found!"
            cat vulnerable-packages.txt
            exit 1
          fi
        fi
        echo "✅ No vulnerable packages found"
    
    - name: Check for deprecated packages
      run: |
        echo "Checking for deprecated NuGet packages..."
        dotnet list package --deprecated --include-transitive
    
    - name: Check for outdated packages
      run: |
        echo "Checking for outdated NuGet packages..."
        dotnet list package --outdated --include-transitive
      continue-on-error: true
    
    - name: Generate SBOM (Software Bill of Materials)
      uses: anchore/sbom-action@v0
      with:
        path: ./
        format: spdx-json
        output-file: sbom.spdx.json
        upload-artifact: true
        upload-release-assets: false
    
    - name: Scan SBOM with Grype
      uses: anchore/scan-action@v3
      id: scan
      with:
        sbom: sbom.spdx.json
        fail-build: ${{ inputs.fail-on-vulnerabilities }}
        severity-cutoff: ${{ inputs.severity-cutoff }}
    
    - name: Upload Grype scan results to GitHub Security
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ steps.scan.outputs.sarif }}
    
    - name: Download build artifact
      if: inputs.artifact-name != ''
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: ./artifact
    
    - name: Scan published artifacts with Trivy
      if: inputs.artifact-name != ''
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './artifact'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Upload Trivy scan results to GitHub Security
      if: always() && inputs.artifact-name != ''
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-results.sarif

  codeql:
    name: CodeQL SAST Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
        queries: security-and-quality
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:csharp"

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: TruffleHog Secret Scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
