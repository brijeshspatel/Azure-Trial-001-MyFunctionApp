# Reusable workflow for Azure deployment
name: Deploy to Azure

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to (development, staging, production)'
        required: true
        type: string
      artifact-name:
        description: 'Name of the artifact to deploy'
        required: true
        type: string
      function-app-name:
        description: 'Azure Function App name (same across all environments)'
        required: true
        type: string
      run-health-check:
        description: 'Run health check after deployment'
        required: false
        type: boolean
        default: true
      health-check-endpoint:
        description: 'Health check endpoint path'
        required: false
        type: string
        default: '/api/health'
      function-app-url:
        description: 'Base URL for the Function App (environment-specific, e.g., https://myfunctionapp.azurewebsites.net)'
        required: true
        type: string
    secrets:
      AZURE_CREDENTIALS:
        description: 'Azure SDK auth JSON for Service Principal (environment-specific)'
        required: true
      AZURE_SUBSCRIPTION_ID:
        description: 'Azure Subscription ID for the target environment'
        required: true

jobs:
  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
      url: ${{ inputs.function-app-url }}
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: ./artifact
    
    - name: Azure Login (OIDC)
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Set Azure Subscription
      run: |
        echo "Setting Azure subscription to: ${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        az account set --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        
        # Verify the subscription is set correctly
        CURRENT_SUB=$(az account show --query id -o tsv)
        echo "Current subscription: $CURRENT_SUB"
        
        # Get subscription name for logging
        SUB_NAME=$(az account show --query name -o tsv)
        echo "Subscription name: $SUB_NAME"
        echo "### Deployment Target" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Subscription:** $SUB_NAME" >> $GITHUB_STEP_SUMMARY
        echo "- **Subscription ID:** ${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Function App:** ${{ inputs.function-app-name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL:** ${{ inputs.function-app-url }}" >> $GITHUB_STEP_SUMMARY
    
    - name: Verify Function App exists
      run: |
        echo "Verifying Function App '${{ inputs.function-app-name }}' exists in subscription..."
        
        if az functionapp show --name "${{ inputs.function-app-name }}" --resource-group "$(az functionapp list --query "[?name=='${{ inputs.function-app-name }}'].resourceGroup" -o tsv)" &>/dev/null; then
          echo "✅ Function App found"
          RG=$(az functionapp list --query "[?name=='${{ inputs.function-app-name }}'].resourceGroup" -o tsv)
          echo "Resource Group: $RG"
          echo "resource-group=$RG" >> $GITHUB_OUTPUT
        else
          echo "❌ Function App '${{ inputs.function-app-name }}' not found in subscription"
          echo "Please ensure the Function App is created in the ${{ inputs.environment }} subscription before deploying."
          exit 1
        fi
      id: verify-app
    
    - name: Deploy to Azure Functions
      id: deploy
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ inputs.function-app-name }}
        package: ./artifact
        respect-funcignore: true
    
    - name: Wait for deployment
      if: inputs.run-health-check
      run: |
        echo "Waiting for deployment to complete..."
        sleep 30
    
    - name: Health check
      if: inputs.run-health-check
      run: |
        echo "Running health check against ${{ inputs.environment }} environment..."
        APP_URL="${{ inputs.function-app-url }}"
        
        # Try health check endpoint if provided
        if [ -n "${{ inputs.health-check-endpoint }}" ]; then
          echo "Checking: ${APP_URL}${{ inputs.health-check-endpoint }}"
          if curl -f -s "${APP_URL}${{ inputs.health-check-endpoint }}"; then
            echo "✅ Health check passed"
          else
            echo "⚠️ Health check endpoint not responding (this may be expected if not implemented)"
          fi
        else
          echo "No health check endpoint configured, skipping health check"
        fi
      continue-on-error: true
    
    - name: Deployment summary
      run: |
        echo "### Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Function App:** ${{ inputs.function-app-name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL:** ${{ inputs.function-app-url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Artifact:** ${{ inputs.artifact-name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** ✅ Deployed successfully" >> $GITHUB_STEP_SUMMARY
